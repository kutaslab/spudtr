# spudt continous integration and deployment workflow
# 
# CI: 
#   - build and pytest the conda package for python 3.6, 3.7, 3.8
#   - build python package sdist
#   - build sphinx docs
# 
# Deployment switches on pre-release vs. main (tagged stable release)
#
#   dev branch package versions M.N.P.devX deploys
#     - oys conda package to Anaconda Cloud label pre-release
#     - dupload python package sdist to test.pypi.org
#   release tagged vM.N.P with package version M.N.P
#     - upload conda package to Anaconda Cloud label main
#     - upload python package sdist to pypi.org
#

name: spudtr-cid
on:
  # any pushed branch, exclude pushed tags to prevent double runs on tagged release
  push:
    branches:  # same as branches: ["*"]
    tags-ignore:
  pull_request:
  release:
    types: [published]

env:
  PACKAGE_NAME: spudtr
  SPHINX_DOCS_PATH: $HOME/docs
  SPHIX_DOCS_HTML: $HOME/docs/build/html

defaults:
  run:
    shell:
      bash -l {0}

jobs:
  conda-ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py_ver: [3.6, 3.7, 3.8]

    env:
      PY_VER: ${{ matrix.py_ver }}
      CONDA_BLD_PATH: /tmp/ci_conda_bld

    steps:

      # verified on github
      - uses: actions/checkout@v2

      # v0.2.1 or use release tag as above
      - name: setup miniconda
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          # so conda activate works in non-interactive login shells via bash -l {0}
          conda shell.bash hook >> ~/.bash_profile
          mkdir -p $CONDA_BLD_PATH && rm miniconda.sh

      - name: build conda package tarball
        id: conda-bld
        run: |
          conda config --set always_yes yes --set changeps1 no --set bld_path $CONDA_BLD_PATH
          conda install -q conda-build conda-verify
          conda info -a

          export GIT_ABBREV_COMMIT=_g${GITHUB_SHA:0:8}  # meta.yaml builds this into pkg name
          conda build --python=$PY_VER -c defaults -c conda-forge conda
          tarball=$(conda build conda --output)
          echo "TARBALL=$tarball" >> $GITHUB_ENV

      - name: conda install and pytest
        run: |
          conda create -n env_$PY_VER python=$PY_VER $PACKAGE_NAME -c file://$CONDA_BLD_PATH -c defaults -c conda-forge
          conda activate env_$PY_VER
          conda install -q black pytest pytest-cov
          conda list
          lscpu
          python -c 'import numpy; numpy.show_config()'
          # black --check --verbose .
          # pytest --cov=$PACKAGE_NAME 

      # ------------------------------------------------------------
      # DEPLOY_TYPE selects conda, python package, and docs uploads
      - name: set DEPLOY_TYPE=<pre-release|main|cid_test>
        run: |
          # extract version string from the conda package tarball
          pkg_version=`echo $TARBALL | sed -n "s/.*${PACKAGE_NAME}-\(.\+\)-.*/\1/p"`
          pkg_mnp=`echo $pkg_version | sed -n "s/\(\([0-9]\+\.\)\{1,2\}[0-9]\+\).*/\1/p"`

          # pre-release if package version M.N.P.dev on dev branch
          if [[ \
            $GITHUB_REF == refs/branch/dev && \
            $TARBALL =~ $PACKAGE_NAME-([0-9]+\.){3}dev[0-9]+-${PY_VER} \
          ]]; then \
            deploy_type="pre-release"; \
          fi

          # main if package version M.N.P on tagged release vM.N.P
          if [[ \
            $GITHUB_REF =~ refs/tag/v[0-9]+\.[0-9]+\.[0-9] && \
            $TARBALL =~ $PACKAGE_NAME-([0-9]+\.){2}[0-9]+-${PY_VER} && \
            $pkg_version == $pkg_mnp \
          ]]; then \
            deploy_type="main"; \
          fi

          # else set to default deploy type
          deploy_type=${deploy_type:-cid_test}

          #  update env for deployment
          echo "DEPLOY_TYPE=${deploy_type}" >> $GITHUB_ENV

          # debugging
          echo  deploy type: $deploy_type $PACKAGE_NAME $TARBALL $pkg_version $pkg_mnp

      # debugging 
      - name: env check
        run: |
          conda activate env_$PY_VER
          printenv | sort

      # ------------------------------------------------------------
      # deploy conda py3X packages
      - name: deploy conda packages
        if: ${{ env.DEPLOY_TYPE == 'pre-release' || env.DEPLOY_TYPE == 'main' }}
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          conda install -q anaconda
          conda convert -p osx-64 -p win-64 $TARBALL -o $CONDA_BLD_PATH
          anaconda \
            -t "$ANACONDA_TOKEN" upload \
            $CONDA_BLD_PATH/**/${PACKAGE_NAME}*.tar.bz2 \
            -l $DEPLOY_TYPE \
            --skip-existing

      # ------------------------------------------------------------
      # sphinx docs
      - name: build sphinx docs
        if: ${{ matrix.py_ver == '3.8' }}
        run: |
          conda activate env_$PY_VER  # required to run doc demos
          conda install -q sphinx sphinx_rtd_theme jupyter nbsphinx "nbconvert!=5.4" -c defaults -c conda-forge
          conda install -q pandoc -c conda-forge
          make -C docs html
          touch docs/build/html/.nojekyll

      - name: deploy sphinx docs
        if: ${{ matrix.py_ver == '3.8' && env.DEPLOY_TYPE == 'cid_test' }} # 'main' }}
        run: |
          cd docs/build/html
          ls -lR 
          git checkout --orphan gh-pages
          git add -A
          git ls-files
          git commit -a -m "spudtr_cid docs bot"
          git push -u origin gh-pages --force

      # ------------------------------------------------------------
      # codecov
      - name: deploy codecov
        if: ${{ matrix.py_ver == '3.8' && env.DEPLOY_TYPE == 'main' }}
        run: |
          conda install -q codecov && codecov

      # ------------------------------------------------------------
      # deploy python package ... trailing / on repos is required
      - name: build python package sdist
        if: ${{ matrix.py_ver == '3.8' }}
        run: |
          conda install twine
          python setup.py sdist

      - name: deploy pre-release sdist
        if: ${{ matrix.py_ver == '3.8' && env.DEPLOY_TYPE == 'pre-release' }}
        env:
          TEST_PYPI_TOKEN: ${{ secrets.test_pypi_token }}
        run: >-
          twine upload
            --repository-url https://test.pypi.org/legacy/
            -u __token__
            -p "$TEST_PYPI_TOKEN"
            --skip-existing
            dist/*

        # run last to avoid burning version strings on PyPI
        # - name: deploy main sdist
        #   if: ${{ matrix.py_ver == '3.8' && env.DEPLOY_TYPE == 'main' }}
        #   env:
        #     PYPI_TOKEN: ${{ secrets.pypi_token }}
        #   run: >-
        #     twine upload
        #       --repository-url https://pypi.org/
        #       -u __token__
        #       -p "$PYPI_TOKEN"
        #       dist/*
