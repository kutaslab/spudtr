# Continous integration and deployment (CID) workflow
#
# T. Urbach 12/2020
# 
# - canonical package semantic version strings are M.N.P and M.N.P.devX
# - job matrix runs on linux-64 for Python 3.6, 3.7, 3.8
# - each py3X job builds, installs, pytests, and deploys its own conda py3X packages
# - one py3X job deploys codecov, python package sdist, and docs
# - cron runs daily to conda build, install, pytest the latest commit on default branch
#
# CI:
#
#   - conda build, install, and pytest the conda packages linux-64 py3[678]
#   - conda convert py3[678] x [osx-64, win-64] (untested)
#   - build sphinx docs
#   - build python package sdist
#
# Deployment:
#
#   Development: package version M.N.P.devX on dev branch triggers
#     - anaconda upload py3X x OS-64 tarballs to channel label /pre-release
#     - twine python build/sdist to test.pypi.org
#
#   Stable release: version M.N.P on release tagged vM.N.P triggers
#     - anaconda upload py3X x OS-64 tarballs to channel label /main
#     - codecov
#     - sphinx docs to gh-pages
#     - twine python build/sdist to pypi.org
#
# Notes:
#
# Conda env wrangling. To run conda activate in bash shells, the conda
#   shell.bash hook must be sourced. The usual "conda init bash"
#   installs the hook in .bashrc which isn't consulted (or exits
#   early) for the Actions non-interactive shells. One option is to
#   re-install the hook each time it is needed in a run step like so:
#
#     - eval "$(conda shell.bash hook)"
#     - conda activate myenv
#
#   The approach here is to install the hook in .profile_bash one time
#   in the conda setup and run bash as a non-interactive login shell.
#
# Github releases. Github published releases generate a release and a
#   push event. Pushed stable release tags are ignored to prevent
#   double workflow runs.

name: spudtr-cid
on:
  push:
    branches: ['*']
    tags-ignore:
      - v[0-9].[0-9].[0-9]  # prevent double runs on vM.N.P release
  pull_request:
  release:
    types: [published]

  schedule:
    # min hour day month year, digit = when, / = step by, * = all
    - cron: '0 0 */1 * *'

env:
  PACKAGE_NAME: spudtr
  DEPLOY_PY_VER: 3.8  # this job deploys codecov, docs, sdist

defaults:
  # use a login shell to source .bash_profile with the conda hook
  run:
    shell:
      bash -l {0}

jobs:
  conda-ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py_ver: [3.6, 3.7, 3.8]

    env:
      PY_VER: ${{ matrix.py_ver }}
      CONDA_BLD_PATH: /tmp/ci_conda_bld

    outputs:
      # tarballs are py3X job-specific, set the value
      # as an output or in job.env
      conda-tarball: ${{ steps.conda-bld.outputs.conda-tarball }}

    steps:

      # verified on github
      - uses: actions/checkout@v2

      # instead of 3rd party conda setups
      - name: setup miniconda
        id: conda-setup
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          # so conda activate works with bash -l {0}
          conda shell.bash hook >> ~/.bash_profile
          mkdir -p $CONDA_BLD_PATH && rm miniconda.sh
          hash -r
          source ~/.bash_profile && conda_activate
          conda config --set always_yes yes --set changeps1 no
          conda config --set bld_path $CONDA_BLD_PATH
          conda install -q conda-build conda-verify anaconda
          conda info -a

      - name: build conda package tarballs
        id: conda-bld
        run: |
          # short SHA gets baked into the conda package filename in conda/meta.yaml
          echo "GIT_ABBREV_COMMIT=_g${GITHUB_SHA:0:8}" >> $GITHUB_ENV

          conda build --python=$PY_VER -c defaults -c conda-forge conda
          tarball=$(conda build --python=$PY_VER conda --output)
          conda convert -p osx-64 -p win-64 -o $CONDA_BLD_PATH $tarball
          echo "::set-output name=conda-tarball::tarball"

      - name: conda install -c local and pytest
        run: |
          conda create -n env_$PY_VER python=$PY_VER $PACKAGE_NAME -c local -c defaults -c conda-forge
          conda activate env_$PY_VER
          conda install -q black pytest pytest-cov
          conda list
          lscpu
          python -c 'import numpy; numpy.show_config()'
          black --check --verbose .
          pytest --cov=$PACKAGE_NAME # test as installed by conda

      # ------------------------------------------------------------
      # DEPLOY_TYPE selects conda, python package, and docs uploads
      # - canonical version strings are M.N.P.devX and M.N.P
      # - tarballs are $CONDA_BLD_PATH/linux-64/PACKAGE_NAME-.+-py3[678]_g[a-z0-9]{8}.tar.bz2
      # - pkg_version is entire M.N.P.devX version string
      # - pkg_mnp is M.N.P only
      - name: set DEPLOY_TYPE=<pre-release|main|no_deploy>
        run: |
          tarball=${{ steps.conda-bld.outputs.conda-tarball }}
          pkg_version=`echo $tarball | sed -n "s/.*${PACKAGE_NAME}-\(.\+\)-.*/\1/p"`
          pkg_mnp=`echo $pkg_version | sed -n "s/\(\([0-9]\+\.\)\{1,2\}[0-9]\+\).*/\1/p"`

          # pre-release if package version M.N.P.devX on dev branch
          if [[ \
            $GITHUB_REF =~ ^refs/heads/dev$ && \
            $pkg_version =~ ^([0-9]+\.){2}[0-9]+(\.dev[0-9]+){0,1}$ \
          ]]; then \
            deploy_type="pre-release"; \
          fi

          # main if package version is M.N.P on tagged release vM.N.P
          if [[ \
            $GITHUB_REF =~ ^refs/tags/v([0-9]+\.){2}[0-9]+$ && \
            $pkg_version == $pkg_mnp \
          ]]; then \
            deploy_type="main"; \
          fi

          # else set to default deploy type
          deploy_type=${deploy_type:-no_deploy}

          #  update top level env for deployment
          echo "PKG_VERSION=${pkg_version}" >> $GITHUB_ENV
          echo "PKG_MNP=${pkg_mnp}" >> $GITHUB_ENV
          echo "DEPLOY_TYPE=${deploy_type}" >> $GITHUB_ENV

          # logging
          echo $PACKAGE_NAME $deploy_type $tarball $pkg_version $pkg_mnp

      # logging
      - name: show package env
        run: |
          conda activate env_$PY_VER
          printenv | sort

      # ------------------------------------------------------------
      # deploy conda py3X packages, token comes before upload
      - name: deploy conda packages
        if: ${{ env.DEPLOY_TYPE == 'pre-release' || env.DEPLOY_TYPE == 'main' }}
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: >-
          anaconda
          -t "$ANACONDA_TOKEN"
          upload $CONDA_BLD_PATH/**/${PACKAGE_NAME}*.tar.bz2
          -l $DEPLOY_TYPE
          --skip-existing

      # ------------------------------------------------------------
      # deploy codecov
      - name: deploy codecov
        if: ${{ matrix.py_ver == env.DEPLOY_PY_VER && env.DEPLOY_TYPE == 'main' }}
        run: conda install -q codecov && codecov

      # ------------------------------------------------------------
      # build sphinx docs, deploy if main
      - name: build sphinx docs
        if: ${{ matrix.py_ver == env.DEPLOY_PY_VER }}
        run: |
          conda activate env_$PY_VER  # required to run doc demos
          conda install -q sphinx sphinx_rtd_theme jupyter nbsphinx "nbconvert!=5.4" -c defaults -c conda-forge
          conda install -q pandoc -c conda-forge
          make -C docs html
          touch docs/build/html/.nojekyll

      # push the sphinx html to gh-pages, may fail if branch has changed since checkout
      - name: deploy sphinx docs
        if: ${{ matrix.py_ver == env.DEPLOY_PY_VER && env.DEPLOY_TYPE == 'main' }}
        run: |
          cd /docs/build/html  # wherever sphinx writes the html, repo specific
          git init 
          user_name="docs_${GITHUB_EVENT_NAME}_bot"
          git config user.email "${user_name}@the.cloud.org"
          git config user.name "$user_name"
          git remote add origin "https://${user_name}:${{ secrets.github_token }}@github.com/${GITHUB_REPOSITORY}"
          git checkout --orphan gh-pages
          git add -A
          git commit -a -m "deploy type $DEPLOY_TYPE python $DEPLOY_PY_VER"
          git push -u origin gh-pages --force

      # ------------------------------------------------------------
      # build and deploy python package ... trailing / on repos is required
      - name: build python package sdist
        if: ${{ matrix.py_ver == env.DEPLOY_PY_VER }}
        run: |
          conda install twine
          python setup.py sdist

      # route pre-release to test.pypi.org
      - name: deploy pre-release sdist
        if: ${{ matrix.py_ver == env.DEPLOY_PY_VER && env.DEPLOY_TYPE == 'pre-release' }}
        env:
          TEST_PYPI_TOKEN: ${{ secrets.test_pypi_token }}
        run: >-
          twine upload
          --repository-url https://test.pypi.org/legacy/
          -u __token__
          -p "$TEST_PYPI_TOKEN"
          --skip-existing
          dist/*

      # route main to pypi.org, run last to avoid burning stable version strings
      - name: deploy main sdist
        if: ${{ matrix.py_ver == env.DEPLOY_PY_VER && env.DEPLOY_TYPE == 'main' }}
        env:
          PYPI_TOKEN: ${{ secrets.pypi_token }}
        run: >-
          twine upload
          --repository-url https://pypi.org/
          -u __token__
          -p "$PYPI_TOKEN"
          dist/*
